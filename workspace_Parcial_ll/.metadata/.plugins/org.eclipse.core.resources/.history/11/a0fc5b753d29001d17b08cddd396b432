/*
 * parser.c
 *
 *  Created on: 31 ago 2022
 *      Author: admin
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "LinkedList.h"
#include "Pokemon.h"
#include "controller.h"
#include "alumno.h"
#include "parser.h"

//parser echo a medida dependiendo de el tipo y cantidad de atributos de una struct
int parser_FromText(FILE* pFile, LinkedList* lista)
{
	int retorno = -1;
	eParticipante* auxParticipante;


	char bufferId[128];
	char bufferNombre[128];
	char bufferIdDificultad[128];
	char bufferEdad[128];
	char bufferScore[128];

	//buffer para menu, pie
	char buffer[300];
	int contador = 0;



	if(pFile != NULL && lista != NULL)
	{
		//lee hasta encontrar el primer \n y da un enter \n
		fscanf(pFile, "%[^\n]\n", buffer);
		do
		{
			//lee 5 veces(determinado por cant, atributos por struct) las primeras 4 lo hace hasta la coma, el ultimo hasta el \n y luego \n
			if(fscanf(pFile,"%[^,],%[^,],%[^,],%[^,],%[^\n]\n", bufferId, bufferNombre, bufferEdad, bufferIdDificultad, bufferScore) == 5)
			{
				//enviamos como char, los parametros al constructor que luego los convertira
				auxParticipante = Participante_newParametros(bufferId, bufferNombre, bufferEdad, bufferIdDificultad, bufferScore);
				if(auxParticipante != NULL)
				{
					if(ll_add(lista, auxParticipante) == 0)
					{
						//contador para la cantidad de elementos cargados, sirve como control
						contador++;
					}
				}
			}

		}while(!feof(pFile));
		//mientras no llegue al final del texto, el cursor
	}

	retorno = contador;


	return retorno;
}
